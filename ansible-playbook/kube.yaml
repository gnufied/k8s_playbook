---
- hosts: all

- hosts: all
  vars:
    k8s_home: "/home/{{ansible_env.USER}}/goal/src/k8s.io/kubernetes"
    nonroot_user: '{{ ansible_env.USER }}'
    invoker_root: '/home/{{nonroot_user}}/invoker_files'
  environment:
    GOPATH: "/home/{{nonroot_user}}/goal"
    GOROOT: /usr/local/go
    PATH: '{{ ansible_env.PATH }}:/home/{{nonroot_user}}/goal/bin:/usr/local/go/bin'
  tasks:
    - name: create GOPATH
      command: "mkdir -p /home/{{nonroot_user}}/goal"
    - name: add GOPATH to shell
      lineinfile:
        dest: "/home/{{nonroot_user}}/.bashrc"
        line: "export GOPATH=$HOME/goal"
    - name: Add GOPATH to path
      lineinfile:
        dest: "/home/{{nonroot_user}}/.bashrc"
        line: "export PATH=$GOPATH/bin:$PATH"
    - name: Install dummy package in GOPATH
      command: "go get -u github.com/motemen/gore"
    - name: Create directory for k8s clone
      command: "mkdir -p /home/{{nonroot_user}}/goal/src/k8s.io"
    - name: Check if kube is cloned
      stat:
        path: "{{ k8s_home }}"
      register: k8s_stat
    - name: Clone Kube in GOPATH
      command: "git clone https://github.com/gnufied/kubernetes.git chdir=/home/{{nonroot_user}}/goal/src/k8s.io"
      when: k8s_stat.stat.exists == False
    - name: Refresh kube clone
      command: "git pull origin master chdir={{ k8s_home }}"
      when: k8s_stat.stat.exists == True
    - name: Compile Kube
      command: >
        chdir={{ k8s_home }}
        creates={{ k8s_home }}/_output/bin/kubectl
        make
    - name: Copy the binaries
      command: >
        chdir={{ k8s_home }}/_output/bin
        creates=/usr/local/bin/kubectl
        cp {{item}} /usr/local/bin/
      with_items:
        - kubeadm
        - kubectl
        - hyperkube
        - kube-apiserver
        - kube-dns
        - kube-controller-manager
        - kube-discovery
        - kubelet
        - kube-scheduler
        - kube-proxy
      become: true
    - name: Create invoker directory
      command: mkdir -p ~/invoker_files
    - name: Copy invoker.ini files
      template: >
        src=invoker_files/invoker.j2
        dest=~/invoker_files/invoker.ini
    - name: Check if Invoker is running
      stat:
        path: /root/.invoker/invoker.pid
      register: invoker_state
      become: true
    - name: Start invoker
      command: >
        chdir={{invoker_root}}
        invoker stop
        invoker start invoker.ini -d
      become: true
      when: invoker_state.stat.exists == False
    - name: Configure kubectl
      command: >
        chdir={{invoker_root}}
        {{item}}
      with_items:
        - "kubectl config set-cluster local --server=0.0.0.0:8080 --kubeconfig={{nonroot_user}}/.kube/config"
        - "kubectl config set-context local --cluster=local"
        - "kubectl config use-context local"
